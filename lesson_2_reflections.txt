What happens when you initialize a repository? Why do you need to do it?
It dosen haver any commite. I need to create my first commite. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
The stagin area is different because is not a final host for a document, is in the middle. Is very value because we can make changes whitout saving in the finale file.

How can you use the staging area to make sure you have one commit per logical change?
Using git stat i can make sure that only one commit pero logical change. 

When to Use Branches

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches help to make different version of the same file. Is very usfule because i don't need to make another file to make it changes. 

How do the diagrams help you visualize the branch structure?

Understanding the structure i learn how the branches and commit work together. 

Merging Two Branches

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The master branch get the commits of the master branch and ther other branch. To understand how it's works. 

Merge

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Pors automatic is faster, automatic dosen´t know the final versión at all. 


git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
